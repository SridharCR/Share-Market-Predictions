geom_jitter(alpha = 1/20)+
xlim(13,90)+
coord_trans(x = "log10",y = "log10")
ggplot(aes(x = age,y = friend_count),data = pf)+
geom_jitter(alpha = 1/20)+
xlim(13,90)
ggplot(aes(x = age,y = friend_count),data = pf)+
geom_jitter(alpha = 1/20)+xlim(13,90)+
coord_trans(x = "log10",y = "log10")
ggplot(aes(x = age,y = friend_count),data = pf)+
geom_jitter(alpha = 1/20)+xlim(13,90)+
coord_trans(y = "log10")
ggplot(aes(x = age,y = friend_count),data = pf)+
geom_jitter(alpha = 1/20)+xlim(13,90)+
coord_trans(y = "sqrt")
ggplot(aes(x = age,y = friend_count),data = pf)+
geom_jitter(alpha = 1/20)+xlim(13,90)+
coord_trans(y = 'sqrt')
ggplot(aes(x = age,y = friend_count),data = pf)+
geom_point(alpha = 1/20)+xlim(13,90)+
coord_trans(y = 'sqrt')
coord_trans(y = 'sqrt')
ggplot(aes(x = age,y = friend_count),data = pf)+
geom_point(alpha = 1/20)+xlim(13,90)+
coord_trans(y = 'sqrt')
ggplot(aes(x = age,y = friend_count),data = pf)+
geom_point(alpha = 1/20)+xlim(13,90)+
coord_trans(y = 'sqrt')
ggplot(aes(x = age,y = friend_count),data = pf)+
geom_point(alpha = 1/20,position = position_jitter(h = 0))+xlim(13,90)+
coord_trans(y = 'sqrt')
ggplot(aes(x = age,y = friend_count),data = pf)+
geom_point(alpha = 1/20,position = position_jitter(h = 0))+xlim(13,90)+
coord_trans(y = 'sqrt')
ggplot(aes(x = age,y = friend_count),data = pf)+
geom_point(alpha = 1/20)+xlim(13,90)+
coord_trans(y = 'sqrt')
ggplot(aes(x = age,y = friend_count),data = pf)+
geom_point(alpha = 1/20,position = position_jitter(h = 0))+xlim(13,90)+
coord_trans(y = 'sqrt')
names.pf(pf)
names(pf)
ggplot(data = pf,aes(x = friendships_initiated,y = age))+
geom_abline()
ggplot(data = pf,aes(x = friendships_initiated,y = age))+
geom_point()
ggplot(data = pf,aes(x = age,y = friendships_initiated))+
geom_point()
ggplot(data = pf,aes(x = age,y = friendships_initiated))+
geom_point(alpha = 1/50)+
coord_trans(y = "sqrt")
ggplot(data = pf,aes(x = age,y = friendships_initiated))+
coord_trans(y = "sqrt")
geom_point(alpha = 1/50)+
ggplot(data = pf,aes(x = age,y = friendships_initiated))+
geom_point(alpha = 1/50)+
coord_trans(y = "sqrt")
ggplot(data = pf,aes(x = age,y = friendships_initiated))+
geom_point(alpha = 1/20)+
coord_trans(y = "sqrt")
ggplot(data = pf,aes(x = age,y = friendships_initiated))+
geom_point(alpha = 1/20)+
coord_trans(y = "sqrt")
ggplot(data = pf,aes(x = age,y = friendships_initiated))+
geom_point(alpha = 1/20)+xlim(0,90)
ggplot(data = pf,aes(x = age,y = friendships_initiated))+
geom_point(alpha = 1/20)+xlim(13,90)
ggplot(data = pf,aes(x = age,y = friendships_initiated))+
geom_point(alpha = 1/20,position = position_jitter(h = 0))+xlim(13,90)
library(dplyr)
install.packages('dplyr')
install.packages('dplyr')
install.packages('dplyr')
install.packages('dplyr')
library("dplyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("dplyr")
install.packages('dplyr')
library(dplyr)
install.packages('dplyr')
library("dplyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("dplyr")
install.packages("tidyverse")
install.packages(ggplot2)
install.packages(ggplot2)
install.packages('ggplot2')
library(ggplot2)
library(dplyr)
install.packages('ggplot2')
install.packages("ggplot2")
install.packages('dplyr')
library(dplyr)
install.packages('dplyr')
library(dplyr)
age_groups <- group_by(pf,age)
pf.fc_by_age <- summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
View(age_groups)
View(age_groups)
View(pf.fc_by_age)
View(pf.fc_by_age)
pf.fc_by_age <- arrage(pf.fc_by_age)
pf.fc_by_age <- arrange(pf.fc_by_age)
pf.fc_by_age <- arrange(pf.fc_by_age,age)
pf.fc_by_age
pf.fc_by_age1 <- pf %.%
group_by(pf,age) %.%
summarize(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %.%
arrange(age)
pf.fc_by_age1 <- pf %>%
group_by(pf,age) %.%
summarize(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age)
pf.fc_by_age1 <- pf %>%
group_by(pf,age) %>%
summarize(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age)
pf.fc_by_age1 <-
group_by(pf,age) %>%
summarize(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age)
View(pf.fc_by_age1)
names(pf.fc_by_age)
ggplot(aes(x = age,y = friend_count_mean),data = pf)+geom_point()
ggplot2(aes(x = age,y = friend_count_mean),data = pf)+geom_point()
library(ggplot2)
ggplot2(aes(x = age,y = friend_count_mean),data = pf)+geom_point()
ggplot(aes(x = age,y = friend_count_mean),data = pf)+geom_point()
str(yotta)
yotta <- read.csv('register.csv')
?
mtcars
dimond
diamond
#install.packages('dplyr')
library(dplyr)
age_groups <- group_by()
install.packages('dplyr')
library(dplyr)
age_groups <- group_by()
install.packages("dplyr")
#install.packages('dplyr')
library(dplyr)
age_groups <- group_by()
age_groups <- group_by(age, pf)
setwd('~/Documents/R/lesson3')
library(ggplot2)
pf <- read.csv('pseudo_facebook.tsv',sep = '\t')
qplot(x = age,y = friend_count,data = pf)
setwd('~/Documents/R/lesson3')
library(ggplot2)
pf <- read.csv('pseudo_facebook.tsv',sep = '\t')
qplot(x = age,y = friend_count,data = pf)
ggplot(aes(x = age,y = friend_count),data = pf)+geom_point() + xlim(13,90)
ggplot(aes(x = age,y = friend_count),data = pf)+
geom_jitter(alpha = 1/20)+
xlim(13,90)
ggplot(aes(x = age,y = friend_count),data = pf)+
geom_point(alpha = 1/20)+xlim(13,90)+
coord_trans(y = 'sqrt')
ggplot(aes(x = age,y = friend_count),data = pf)+
geom_point(alpha = 1/20,position = position_jitter(h = 0))+xlim(13,90)+
coord_trans(y = 'sqrt')
ggplot(data = pf,aes(x = age,y = friendships_initiated))+
geom_point(alpha = 1/20,position = position_jitter(h = 0))+xlim(13,90)
coord_trans(y = "sqrt")
#install.packages('dplyr')
library(dplyr)
age_groups <- group_by(age, pf)
#install.packages('dplyr')
library(dplyr)
age_groups <- group_by(pf,age)
pf.fc_by_age <- summarise(age_groups,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n())
pf.fc_by_age <- arrange(pf.fc_by_age,age)
pf.fc_by_age1 <-
group_by(pf,age) %>%
summarize(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age)
#filter()
#groupby()
#arrange()
#mutate()
View(pf.fc_by_age)
View(pf.fc_by_age)
View(age_groups)
library(ggplot2)
ggplot(aes(x = age,y = friend_count_mean),data = pf.fc_by_age)+geom_point()
library(ggplot2)
ggplot(aes(x = age,y = friend_count_mean),data = pf.fc_by_age)+geom_line()
ggplot(aes(x = age,y = friend_count),data = pf)+
xlim(13,90)+
geom_point(alpha = 0.05,position = position_jitter(h = 0)),
ggplot(aes(x = age,y = friend_count),data = pf)+
xlim(13,90)+
geom_point(alpha = 0.05,position = position_jitter(h = 0))color = 'orange')+
ggplot(aes(x = age,y = friend_count),data = pf)+
xlim(13,90)+
geom_point(alpha = 0.05,position = position_jitter(h = 0)),color = 'orange')+
ggplot(aes(x = age,y = friend_count),data = pf)+
xlim(13,90)+
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange')+
coord_trans(y = 'sqrt')
ggplot(aes(x = age,y = friend_count),data = pf)+
xlim(13,90)+
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean)
ggplot(aes(x = age,y = friend_count),data = pf)+
xlim(13,90)+
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean)+
geom_line(stat = 'summary', fun.y = quantile,probs = .1)
ggplot(aes(x = age,y = friend_count),data = pf)+
xlim(13,90)+
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean)+
geom_line(stat = 'summary', fun.y = quantile)
ggplot(aes(x = age,y = friend_count),data = pf)+
xlim(13,90)+
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean)+
geom_line(stat = 'summary', fun.y = quantile, probs = .1)
ggplot(aes(x = age,y = friend_count),data = pf)+
xlim(13,90)+
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean)+
geom_line(stat = 'summary', fun.y = quantile, probs = .1,linetype = 2, color = 'blue' )
ggplot(aes(x = age,y = friend_count),data = pf)+
xlim(13,90)+
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean)+
ggplot(aes(x = age,y = friend_count),data = pf)+
xlim(13,90)+
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean)
ggplot(aes(x = age,y = friend_count),data = pf)+
xlim(13,90)+
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean)+
geom_line(stat = 'summary', fun.y = quantile, probs = .1,linetype = 2, color = 'blue' )
ggplot(aes(x = age,y = friend_count),data = pf)+
xlim(13,90)+
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = quantile, probs = .1,linetype = 2, color = 'blue' )+
geom_line(stat = 'summary', fun.y = mean)
ggplot(aes(x = age,y = friend_count),data = pf)+
xlim(13,90)+
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean)+
geom_line(stat = 'summary', fun.args = quantile, probs = .1,linetype = 2, color = 'blue' )
ggplot(aes(x = age,y = friend_count),data = pf)+
xlim(13,90)+
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean)+
geom_line(stat = 'summary', fun.y = quantile, probs = .1)
ggplot(aes(x = age,y = friend_count),data = pf)+
xlim(13,90)+
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean)+
geom_line(stat = 'summary', fun.y = quantile, fun.args= list(probs = .1,color = "blue"))
ggplot(aes(x = age,y = friend_count),data = pf)+
xlim(13,90)+
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean)+
geom_line(stat = 'summary', fun.y = quantile, fun.args= list(probs = .1,color = "blue"))+
geom_line(stat = 'summary', fun.y = quantile, fun.args= list(probs = .9,color = "blue"))
ggplot(aes(x = age,y = friend_count),data = pf)+
coord_cartesian(xlim(13,90))+
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean)+
geom_line(stat = 'summary', fun.y = quantile, fun.args= list(probs = .1,color = "blue"))+
geom_line(stat = 'summary', fun.y = quantile, fun.args= list(probs = .9,color = "blue"))
ggplot(aes(x = age,y = friend_count),data = pf)+
coord_cartesian(xlim(13,90))+
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange')+
coord_trans(y = 'sqrt')+
geom_line(stat = 'summary', fun.y = mean)+
geom_line(stat = 'summary', fun.y = quantile, fun.args= list(probs = .1,color = "blue"))+
geom_line(stat = 'summary', fun.y = quantile, fun.args= list(probs = .9,color = "blue"))
ggplot(aes(x = age,y = friend_count),data = pf)+
coord_cartesian(xlim = c(13,90),ylim = c(0,1000))+
geom_point(alpha = 0.05,
position = position_jitter(h = 0),
color = 'orange')+
geom_line(stat = 'summary', fun.y = mean)+
geom_line(stat = 'summary', fun.y = quantile, fun.args= list(probs = .1,color = "blue"))+
geom_line(stat = 'summary', fun.y = quantile, fun.args= list(probs = .9,color = "blue"))
?cor.test
cor.test(age,friend_count)
cor.test(pf$age,pf$friend_count,method = "pearson")
with(pf, cor.test(age, friend_count))
?subset()
with(subset(age,13), cor.test(age, friend_count))
with(subset(pf,13), cor.test(age, friend_count))
with(subset(pf,age > 13,age < 70), cor.test(age, friend_count))
with(subset(pf,age > 13,age < 70), cor.test(age, friend_count))
with(subset(pf,age > 13,age < 70), cor.test(age, friend_count))
with(subset(pf,age < 70), cor.test(age, friend_count))
with(subset(pf,age <= 70), cor.test(age, friend_count))
install.packages('alr3')
library(alr3)
library(alr3)
install.packages(alr3)
install.packages("alr3")
library(alr3)
library("alr3)
/
;
library('alr3')
jmxvb''
;
qplot
()
,
/s
ZF
v
af"`"
``
data(Mitchell)
data(mitchell)
data(mitchell)
data('Mitchell')
?Mitchell
library('alr3')
install.packages("alr3")
library('alr3')
library('alr3')
library('alr3')
library('alr3')
library('alr3')
library(alr3)
q()
head(iris)
library('ggvis')
iris %>% ggvis(~Sepal.Length,~Sepal.Width,fill =~Species) %>% layer_points()
iris %>% ggvis(~Petal.Length,~Petal.Width,fill = ~Species) %>% layer_points()
print(cor(iris$Sepal.Length,iris$Sepal.Width))
print(cor(iris$Petal.Length,iris$Petal.Width))
head(iris)
library('ggvis')
iris %>% ggvis(~Sepal.Length,~Sepal.Width,fill =~Species) %>% layer_points()
iris %>% ggvis(~Petal.Length,~Petal.Width,fill = ~Species) %>% layer_points()
print(cor(iris$Sepal.Length,iris$Sepal.Width))
print(cor(iris$Petal.Length,iris$Petal.Width))
type <- levels(iris$Species)
print(type[1])
cor(iris[iris$Species==type[1],1:4])
print(type[2])
cor(iris[iris$Species==type[3],1:4])
print(type[3])
cor(iris[iris$Species==type[3],1:4])
head(iris)
str(iris)
table(iris$Species)
round(prop.table(table(iris$Species)) * 100, digits = 1)
summary(iris)
summary(iris[c("Petal.Width","Sepal.Width")])
library(class)
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
iris_norm <- as.data.frame(lapply(iris[1:4], normalize))
summary(iris_norm)
set.seed(1234)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
ind
iris.training <- iris[ind==1, 1:4]
head(iris.training)
iris.test <- iris[ind==2, 1:4]
head(iris.test)
iris.trainLabels <- iris[ind==1,5]
print(iris.trainLabels)
iris.testLabels <- iris[ind==2, 5]
print(iris.testLabels)
iris_pred <- knn(train = iris.training, test = iris.test, cl = iris.trainLabels, k=3)
iris_pred
irisTestLabels <- data.frame(iris.testLabels)
merge <- data.frame(iris_pred, iris.testLabels)
names(merge) <- c("Predicted Species", "Observed Species")
merge
shiny::runApp('Documents/Projects/Stock Prediction/Star')
runApp('Documents/Projects/Stock Prediction/Star')
runApp('Documents/Projects/Stock Prediction/Star')
av_api_key("MKZU4NIZYCV91AOZ")
sri <- data.frame(av_get(symbol = "MSFT", av_fun = "TIME_SERIES_DAILY", interval = "15min", outputsize = "compact"))
sri
runApp('Documents/Projects/Stock Prediction/Star')
runApp('Documents/Projects/Stock Prediction/Star')
runApp('Documents/Projects/Stock Prediction/Star')
runApp('Documents/Projects/Stock Prediction/Star')
stock_name
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(DT)
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Stock prediction"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textInput(inputId = "stock_name",label = "Enter the stock name",value = "MSFT")
),
mainPanel(
h2("Stock data"),
DT::dataTableOutput("mytable")
)
)
# Show a plot of the generated distribution
))
#
# This is the server logic of a Shiny web application. You can run the
# application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(DT)
library(shiny)
library(alphavantager)
star_init <- function()
{
av_api_key("MKZU4NIZYCV91AOZ");
}
get_data <- function(stock_name)
{
sri <- data.frame(av_get(symbol = stock_name, av_fun = "TIME_SERIES_DAILY", interval = "15min", outputsize = "compact"))
}
shinyServer(function(input, output) {
#startTime <- Sys.time()
star_init()
#av_api_key("MKZU4NIZYCV91AOZ")
sri <- data.frame(av_get(symbol = input$stock_name, av_fun = "TIME_SERIES_DAILY", interval = "15min", outputsize = "compact"))
#get_data(input$stock_name)
output$mytable = DT::renderDataTable({
sri
})
})
shiny::runApp('Documents/Projects/Stock Prediction/Star')
shiny::runApp('Documents/Projects/Stock Prediction/Star')
runApp('Documents/Projects/Stock Prediction/Star')
shiny::runApp('Documents/Projects/Stock Prediction/Star')
